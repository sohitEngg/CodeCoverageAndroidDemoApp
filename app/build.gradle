apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "demoapp.cc.com.codecoverageapp"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }

    }
}

jacoco {
    toolVersion = "0.7.7.201606060606"
}
def fileFilter = [
        'demoapp/cc/com/codecoverageapp/**/Activities/**.*',
        '**/R.class', '**/R$*.class', '**/BuildConfig.*',
        '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"


task customJacocoTestReport(type: JacocoReport, dependsOn: 'test') {

    reports {
        html.enabled = true
        html.setDestination(file("${buildDir}/reports/jacoco"))
    }

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

task customJacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'customJacocoTestReport') {

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")


    violationRules {
        setFailOnViolation(true)

//        rule {
//            element = 'PACKAGE'
//
//            limit {
//                value = 'COVEREDRATIO'
//                counter = 'BRANCH'
//                minimum = 0.8
//            }
//        }

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.6
            }
        }

        rule {
            element = 'PACKAGE'
            includes = ['demoapp.cc.com.codecoverageapp']
            enabled = true

            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
    }
}

//// Define coverage source.
//// If you have rs/aidl etc... add them here.
//def coverageSourceDirs = [
//        'src/main/java/demoapp/cc/com/codecoverageapp/Helper',
//]
//
//task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//    classDirectories = fileTree(
//            dir: './build/intermediates/classes/debug',
//            excludes: [
//                       '**/R*.class',
//                       '**/*$InjectAdapter.class',
//                       '**/*$ModuleAdapter.class',
//                       '**/*$ViewInjector*.class'
//            ])
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files("$buildDir/jacoco/testDebug.exec")
//    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
//    // We iterate through the compiled .class tree and rename $$ to $.
//    doFirst {
//        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//}
//task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
//    violationRules {
//        rule {
//            excludes = [
//                    'demoapp/cc/com/codecoverageapp/Activities/*',
//            ]
//            limit {
//                minimum = 0.79
//            }
//        }
//    }
//}
//
//// to run coverage verification during the build (and fail when appropriate)
//check.dependsOn jacocoTestCoverageVerification

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-rc01'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:design:28.0.0-rc01'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
